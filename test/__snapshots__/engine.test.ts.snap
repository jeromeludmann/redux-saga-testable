// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runner.catch() does not catch a thrown object that does not have "message" property 1`] = `undefined`;

exports[`runner.catch() does not catch an error that does not match the error pattern 1`] = `"Failure"`;

exports[`runner.catch() does not catch an error that is not thrown 1`] = `
"No error thrown by the saga

Given error pattern:

  ƒ Error"
`;

exports[`runner.catch() does not catch errors several times 1`] = `
"Error pattern already provided

Given error pattern:

  /^Saga/"
`;

exports[`runner.catch() does not catch without providing an error pattern 1`] = `"Missing error pattern argument"`;

exports[`runner.map() does not map an effect several times 1`] = `
"Mapped values already provided for this effect

Given effect:

  {
    @@redux-saga/IO: true,
    combinator: false,
    type: \\"CALL\\",
    payload: {
        context: null,
        fn: ƒ fn1,
        args: []
    }
  }

Existing mapped values:

  [
    \\"result1\\"
  ]"
`;

exports[`runner.map() does not map an effect to throwError() without providing an error argument 1`] = `"Missing error argument"`;

exports[`runner.map() does not map an effect to too many values 1`] = `
"Unused mapped values

Given effect:

  {
    @@redux-saga/IO: true,
    combinator: false,
    type: \\"CALL\\",
    payload: {
        context: null,
        fn: ƒ fn1,
        args: []
    }
  }

Unused mapped values:

  [
    \\"unused result\\"
  ]"
`;

exports[`runner.map() does not map an effect without providing a value 1`] = `
"The value to map is missing

Given effect:

  {
    @@redux-saga/IO: true,
    combinator: false,
    type: \\"CALL\\",
    payload: {
        context: null,
        fn: ƒ fn1,
        args: []
    }
  }"
`;

exports[`runner.map() does not map an effect without providing an effect as an argument 1`] = `"Missing effect argument"`;

exports[`runner.map() does not map an unyielded effect to a value 1`] = `
"Unused mapped values

Given effect:

  {
    @@redux-saga/IO: true,
    combinator: false,
    type: \\"CALL\\",
    payload: {
        context: null,
        fn: ƒ fn1,
        args: []
    }
  }

Unused mapped values:

  [
    \\"result\\"
  ]"
`;

exports[`runner.run() does not run a saga that throws a string 1`] = `undefined`;

exports[`runner.run() does not run a saga that throws an error 1`] = `"Failure"`;

exports[`runner.run() does not run a saga that throws an object 1`] = `"Failure"`;

exports[`runner.run() does not run a saga that yields an infinity of effects 1`] = `"Too many yielded effects"`;
